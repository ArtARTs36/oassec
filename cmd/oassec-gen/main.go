package main

import (
	"context"
	"fmt"

	"github.com/artarts36/oassec/cmd/oassec-gen/specification"
	cli "github.com/artarts36/singlecli"
	"gopkg.in/yaml.v3"
	"os"
	"text/template"
)

const configTemplate = `// Code generated by oassec, DO NOT EDIT.
package {{ .Package }}

import (
	"github.com/artarts36/oassec/scope"
)

var ScopeMap = map[string]*scope.Scope {
	{{- range $index, $scope := .Scopes }}
	"{{ $index }}": &scope.Scope{
		Action: "{{ $scope.Action }}",
		ObjectType: "{{ $scope.ObjectType }}",
		ObjectID: scope.ObjectID{
			In: "{{ $scope.ObjectID.In }}",
			Key: "{{ $scope.ObjectID.Key }}",
		},
	},
	{{- end }}
}
`

func main() {
	app := &cli.App{
		BuildInfo: &cli.BuildInfo{
			Name: "oassec",
		},
		Args: []*cli.ArgDefinition{
			{
				Name:        "action",
				Required:    true,
				Description: "Action to run",
				ValuesEnum: []string{
					"gen-scope-map",
				},
			},
			{
				Name:        "spec-path",
				Required:    true,
				Description: "Path to specification, e.g: ./openapi.yml",
			},
			{
				Name:        "out",
				Required:    true,
				Description: "Path to output file",
			},
		},
		Opts: []*cli.OptDefinition{
			{
				Name:        "go-pkg",
				Description: "Go package",
				WithValue:   true,
			},
		},
		Action: run,
	}

	app.RunWithGlobalArgs(context.Background())
}

func run(ctx *cli.Context) error {
	file, err := os.ReadFile(ctx.Args["spec-path"])
	if err != nil {
		return fmt.Errorf("read file: %w", err)
	}

	var spec specification.Spec

	err = yaml.Unmarshal(file, &spec)
	if err != nil {
		return fmt.Errorf("unmarshal yaml: %w", err)
	}

	pkg := ctx.Opts["go-pkg"]
	if pkg == "" {
		pkg = "generated"
	}

	err = gen(&spec, pkg, ctx.Args["out"])
	if err != nil {
		return fmt.Errorf("gen: %w", err)
	}

	return nil
}

func gen(spec *specification.Spec, pkg, outputPath string) error {
	tmpl, err := template.New("template").Parse(configTemplate)
	if err != nil {
		return fmt.Errorf("parse template: %w", err)
	}

	outputFile, err := os.OpenFile(outputPath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		return fmt.Errorf("open output file: %w", err)
	}

	scopes, err := spec.Scopes()
	if err != nil {
		return fmt.Errorf("get scopes: %w", err)
	}

	err = tmpl.Execute(outputFile, map[string]any{
		"Scopes":  scopes,
		"Package": pkg,
	})
	if err != nil {
		return fmt.Errorf("execute template: %w", err)
	}

	return nil
}
